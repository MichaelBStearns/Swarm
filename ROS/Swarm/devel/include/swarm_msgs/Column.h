// Generated by gencpp from file swarm_msgs/Column.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_COLUMN_H
#define SWARM_MSGS_MESSAGE_COLUMN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <swarm_msgs/Square.h>

namespace swarm_msgs
{
template <class ContainerAllocator>
struct Column_
{
  typedef Column_<ContainerAllocator> Type;

  Column_()
    : row()  {
    }
  Column_(const ContainerAllocator& _alloc)
    : row()  {
  (void)_alloc;
      row.assign( ::swarm_msgs::Square_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::swarm_msgs::Square_<ContainerAllocator> , 10>  _row_type;
  _row_type row;





  typedef boost::shared_ptr< ::swarm_msgs::Column_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::Column_<ContainerAllocator> const> ConstPtr;

}; // struct Column_

typedef ::swarm_msgs::Column_<std::allocator<void> > Column;

typedef boost::shared_ptr< ::swarm_msgs::Column > ColumnPtr;
typedef boost::shared_ptr< ::swarm_msgs::Column const> ColumnConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::Column_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::Column_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::Column_<ContainerAllocator1> & lhs, const ::swarm_msgs::Column_<ContainerAllocator2> & rhs)
{
  return lhs.row == rhs.row;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::Column_<ContainerAllocator1> & lhs, const ::swarm_msgs::Column_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::Column_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::Column_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::Column_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::Column_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::Column_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::Column_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::Column_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67820cc83c22bec62d23e6552a65e66b";
  }

  static const char* value(const ::swarm_msgs::Column_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67820cc83c22bec6ULL;
  static const uint64_t static_value2 = 0x2d23e6552a65e66bULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::Column_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/Column";
  }

  static const char* value(const ::swarm_msgs::Column_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::Column_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Square[10] row\n"
"================================================================================\n"
"MSG: swarm_msgs/Square\n"
"int8[5] pheromones\n"
;
  }

  static const char* value(const ::swarm_msgs::Column_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::Column_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.row);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Column_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::Column_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::Column_<ContainerAllocator>& v)
  {
    s << indent << "row[]" << std::endl;
    for (size_t i = 0; i < v.row.size(); ++i)
    {
      s << indent << "  row[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::swarm_msgs::Square_<ContainerAllocator> >::stream(s, indent + "    ", v.row[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_COLUMN_H
