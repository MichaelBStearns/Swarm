// Generated by gencpp from file swarm_msgs/Grid.msg
// DO NOT EDIT!


#ifndef SWARM_MSGS_MESSAGE_GRID_H
#define SWARM_MSGS_MESSAGE_GRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <swarm_msgs/Column.h>

namespace swarm_msgs
{
template <class ContainerAllocator>
struct Grid_
{
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
    : column()  {
    }
  Grid_(const ContainerAllocator& _alloc)
    : column()  {
  (void)_alloc;
      column.assign( ::swarm_msgs::Column_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::swarm_msgs::Column_<ContainerAllocator> , 10>  _column_type;
  _column_type column;





  typedef boost::shared_ptr< ::swarm_msgs::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_msgs::Grid_<ContainerAllocator> const> ConstPtr;

}; // struct Grid_

typedef ::swarm_msgs::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::swarm_msgs::Grid > GridPtr;
typedef boost::shared_ptr< ::swarm_msgs::Grid const> GridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_msgs::Grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_msgs::Grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_msgs::Grid_<ContainerAllocator1> & lhs, const ::swarm_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return lhs.column == rhs.column;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_msgs::Grid_<ContainerAllocator1> & lhs, const ::swarm_msgs::Grid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::Grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_msgs::Grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::Grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_msgs::Grid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5b445e2bca73a30cc767bc84f07b7c1";
  }

  static const char* value(const ::swarm_msgs::Grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5b445e2bca73a30ULL;
  static const uint64_t static_value2 = 0xcc767bc84f07b7c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_msgs/Grid";
  }

  static const char* value(const ::swarm_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_msgs::Grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Column[10] column\n"
"================================================================================\n"
"MSG: swarm_msgs/Column\n"
"Square[10] row\n"
"================================================================================\n"
"MSG: swarm_msgs/Square\n"
"int8[5] pheromones\n"
;
  }

  static const char* value(const ::swarm_msgs::Grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_msgs::Grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.column);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_msgs::Grid_<ContainerAllocator>& v)
  {
    s << indent << "column[]" << std::endl;
    for (size_t i = 0; i < v.column.size(); ++i)
    {
      s << indent << "  column[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::swarm_msgs::Column_<ContainerAllocator> >::stream(s, indent + "    ", v.column[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MSGS_MESSAGE_GRID_H
