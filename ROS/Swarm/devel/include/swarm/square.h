// Generated by gencpp from file swarm/square.msg
// DO NOT EDIT!


#ifndef SWARM_MESSAGE_SQUARE_H
#define SWARM_MESSAGE_SQUARE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm
{
template <class ContainerAllocator>
struct square_
{
  typedef square_<ContainerAllocator> Type;

  square_()
    : pheromones()  {
      pheromones.assign(0);
  }
  square_(const ContainerAllocator& _alloc)
    : pheromones()  {
  (void)_alloc;
      pheromones.assign(0);
  }



   typedef boost::array<uint8_t, 5>  _pheromones_type;
  _pheromones_type pheromones;





  typedef boost::shared_ptr< ::swarm::square_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm::square_<ContainerAllocator> const> ConstPtr;

}; // struct square_

typedef ::swarm::square_<std::allocator<void> > square;

typedef boost::shared_ptr< ::swarm::square > squarePtr;
typedef boost::shared_ptr< ::swarm::square const> squareConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm::square_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm::square_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm::square_<ContainerAllocator1> & lhs, const ::swarm::square_<ContainerAllocator2> & rhs)
{
  return lhs.pheromones == rhs.pheromones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm::square_<ContainerAllocator1> & lhs, const ::swarm::square_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm::square_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm::square_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm::square_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm::square_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm::square_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm::square_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad37cb41072571a31d12e95c135b1050";
  }

  static const char* value(const ::swarm::square_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad37cb41072571a3ULL;
  static const uint64_t static_value2 = 0x1d12e95c135b1050ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm/square";
  }

  static const char* value(const ::swarm::square_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm::square_<ContainerAllocator> >
{
  static const char* value()
  {
    return "char[5] pheromones\n"
;
  }

  static const char* value(const ::swarm::square_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm::square_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pheromones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct square_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm::square_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm::square_<ContainerAllocator>& v)
  {
    s << indent << "pheromones[]" << std::endl;
    for (size_t i = 0; i < v.pheromones.size(); ++i)
    {
      s << indent << "  pheromones[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pheromones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_MESSAGE_SQUARE_H
